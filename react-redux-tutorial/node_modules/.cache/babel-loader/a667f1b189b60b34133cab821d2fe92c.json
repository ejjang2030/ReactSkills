{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\nconst INSERT = 'todos/INSERT';\nconst TOGGLE = 'todos/TOGGLE';\nconst REMOVE = 'todos/REMOVE';\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\nlet id = 3;\nexport const insert = createAction(INSERT, text => ({\n  id: id++,\n  text,\n  done: false\n}));\nexport const toggle = createAction(TOGGLE, id => id);\nexport const remove = createAction(REMOVE, id => id);\nconst initialState = {\n  input: '',\n  todos: [{\n    id: 1,\n    text: '리덕스 기초 배우기',\n    done: true\n  }, {\n    id: 2,\n    text: '리액트와 리덕스 사용하기',\n    done: false\n  }]\n};\nconst todos = handleActions({\n  [CHANGE_INPUT]: (state, _ref) => {\n    let {\n      payload: input\n    } = _ref;\n    return produce(state, draft => {\n      draft.input = input;\n    });\n  },\n  [INSERT]: (state, _ref2) => {\n    let {\n      payload: todo\n    } = _ref2;\n    return produce(state, draft => {\n      draft.todos.push(todo);\n    });\n  },\n  [TOGGLE]: (state, _ref3) => {\n    let {\n      payload: id\n    } = _ref3;\n    return produce(state, draft => {\n      const todo = draft.todos.find(todo => todo.id === id);\n      todo.done = !todo.done;\n    });\n  },\n  [REMOVE]: (state, _ref4) => {\n    let {\n      payload: id\n    } = _ref4;\n    return produce(state, draft => {\n      const index = draft.todos.findIndex(todo => todo.id === id);\n      draft.todos.splice(index, 1);\n    });\n  }\n}, initialState);\nexport default todos;","map":{"version":3,"sources":["D:/Programming/Study/ReactSkills/react-redux-tutorial/src/modules/todos.js"],"names":["createAction","handleActions","produce","CHANGE_INPUT","INSERT","TOGGLE","REMOVE","changeInput","input","id","insert","text","done","toggle","remove","initialState","todos","state","payload","draft","todo","push","find","index","findIndex","splice"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,OAAP,MAAoB,OAApB;AAEA,MAAMC,YAAY,GAAG,oBAArB;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AACA,MAAMC,MAAM,GAAG,cAAf;AAEA,OAAO,MAAMC,WAAW,GAAGP,YAAY,CAACG,YAAD,EAAeK,KAAK,IAAIA,KAAxB,CAAhC;AAEP,IAAIC,EAAE,GAAG,CAAT;AACA,OAAO,MAAMC,MAAM,GAAGV,YAAY,CAACI,MAAD,EAASO,IAAI,KAAK;AAChDF,EAAAA,EAAE,EAAEA,EAAE,EAD0C;AAEhDE,EAAAA,IAFgD;AAGhDC,EAAAA,IAAI,EAAE;AAH0C,CAAL,CAAb,CAA3B;AAMP,OAAO,MAAMC,MAAM,GAAGb,YAAY,CAACK,MAAD,EAASI,EAAE,IAAIA,EAAf,CAA3B;AACP,OAAO,MAAMK,MAAM,GAAGd,YAAY,CAACM,MAAD,EAASG,EAAE,IAAIA,EAAf,CAA3B;AAEP,MAAMM,YAAY,GAAG;AACjBP,EAAAA,KAAK,EAAE,EADU;AAEjBQ,EAAAA,KAAK,EAAE,CACH;AACIP,IAAAA,EAAE,EAAE,CADR;AAEIE,IAAAA,IAAI,EAAE,YAFV;AAGIC,IAAAA,IAAI,EAAE;AAHV,GADG,EAMH;AACIH,IAAAA,EAAE,EAAE,CADR;AAEIE,IAAAA,IAAI,EAAE,eAFV;AAGIC,IAAAA,IAAI,EAAE;AAHV,GANG;AAFU,CAArB;AAgBA,MAAMI,KAAK,GAAGf,aAAa,CACvB;AACI,GAACE,YAAD,GAAgB,CAACc,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEV;AAAX,KAAR;AAAA,WAChBN,OAAO,CAACe,KAAD,EAAQE,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACX,KAAN,GAAcA,KAAd;AACH,KAFM,CADS;AAAA,GADpB;AAKI,GAACJ,MAAD,GAAU,CAACa,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAEE;AAAX,KAAR;AAAA,WACVlB,OAAO,CAACe,KAAD,EAAQE,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACH,KAAN,CAAYK,IAAZ,CAAiBD,IAAjB;AACH,KAFM,CADG;AAAA,GALd;AASI,GAACf,MAAD,GAAU,CAACY,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAET;AAAX,KAAR;AAAA,WACVP,OAAO,CAACe,KAAD,EAAQE,KAAK,IAAI;AACpB,YAAMC,IAAI,GAAGD,KAAK,CAACH,KAAN,CAAYM,IAAZ,CAAiBF,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAArC,CAAb;AACAW,MAAAA,IAAI,CAACR,IAAL,GAAY,CAACQ,IAAI,CAACR,IAAlB;AACH,KAHM,CADG;AAAA,GATd;AAcI,GAACN,MAAD,GAAU,CAACW,KAAD;AAAA,QAAQ;AAAEC,MAAAA,OAAO,EAAET;AAAX,KAAR;AAAA,WACVP,OAAO,CAACe,KAAD,EAAQE,KAAK,IAAI;AACpB,YAAMI,KAAK,GAAGJ,KAAK,CAACH,KAAN,CAAYQ,SAAZ,CAAsBJ,IAAI,IAAIA,IAAI,CAACX,EAAL,KAAYA,EAA1C,CAAd;AACAU,MAAAA,KAAK,CAACH,KAAN,CAAYS,MAAZ,CAAmBF,KAAnB,EAA0B,CAA1B;AACH,KAHM,CADG;AAAA;AAdd,CADuB,EAqBvBR,YArBuB,CAA3B;AAwBA,eAAeC,KAAf","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\n\r\nconst CHANGE_INPUT = 'todos/CHANGE_INPUT';\r\nconst INSERT = 'todos/INSERT';\r\nconst TOGGLE = 'todos/TOGGLE';\r\nconst REMOVE = 'todos/REMOVE';\r\n\r\nexport const changeInput = createAction(CHANGE_INPUT, input => input);\r\n\r\nlet id = 3;\r\nexport const insert = createAction(INSERT, text => ({\r\n    id: id++,\r\n    text,\r\n    done: false,\r\n}));\r\n\r\nexport const toggle = createAction(TOGGLE, id => id);\r\nexport const remove = createAction(REMOVE, id => id);\r\n\r\nconst initialState = {\r\n    input: '',\r\n    todos: [\r\n        {\r\n            id: 1,\r\n            text: '리덕스 기초 배우기',\r\n            done: true\r\n        },\r\n        {\r\n            id: 2,\r\n            text: '리액트와 리덕스 사용하기',\r\n            done: false\r\n        }\r\n    ]\r\n};\r\n\r\nconst todos = handleActions( \r\n    {\r\n        [CHANGE_INPUT]: (state, { payload: input }) => \r\n        produce(state, draft => {\r\n            draft.input = input;\r\n        }),\r\n        [INSERT]: (state, { payload: todo }) => \r\n        produce(state, draft => {\r\n            draft.todos.push(todo);\r\n        }),\r\n        [TOGGLE]: (state, { payload: id }) => \r\n        produce(state, draft => {\r\n            const todo = draft.todos.find(todo => todo.id === id);\r\n            todo.done = !todo.done;\r\n        }),\r\n        [REMOVE]: (state, { payload: id }) => \r\n        produce(state, draft => {\r\n            const index = draft.todos.findIndex(todo => todo.id === id);\r\n            draft.todos.splice(index, 1);\r\n        }),\r\n    },\r\n    initialState,\r\n);\r\n\r\nexport default todos;"]},"metadata":{},"sourceType":"module"}